import os
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from collections import defaultdict
import pandas as pd

def analyze_dataset_detailed(dataset_path, save_dir="dataset_analysis"):
    """
    Ph√¢n t√≠ch chi ti·∫øt dataset v·ªõi nhi·ªÅu lo·∫°i ƒë·ªì th·ªã
    """
    if not os.path.exists(dataset_path):
        print(f"‚ùå Th∆∞ m·ª•c {dataset_path} kh√¥ng t·ªìn t·∫°i!")
        return None
    
    # T·∫°o th∆∞ m·ª•c l∆∞u k·∫øt qu·∫£
    os.makedirs(save_dir, exist_ok=True)
    
    print("üîç ƒêang ph√¢n t√≠ch dataset chi ti·∫øt...")
    
    # Thu th·∫≠p d·ªØ li·ªáu
    class_data = {}
    total_images = 0
    
    for class_name in sorted(os.listdir(dataset_path)):
        class_path = os.path.join(dataset_path, class_name)
        if os.path.isdir(class_path):
            # ƒê·∫øm s·ªë file ·∫£nh v√† ph√¢n lo·∫°i theo ƒë·ªãnh d·∫°ng
            image_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tif', '.gif', '.webp']
            count = 0
            format_counts = defaultdict(int)
            
            for file in os.listdir(class_path):
                file_lower = file.lower()
                if any(file_lower.endswith(ext) for ext in image_extensions):
                    count += 1
                    # X√°c ƒë·ªãnh ƒë·ªãnh d·∫°ng file
                    for ext in image_extensions:
                        if file_lower.endswith(ext):
                            format_counts[ext[1:]] += 1  # B·ªè d·∫•u ch·∫•m
                            break
            
            if count > 0:
                class_data[class_name] = {
                    'count': count,
                    'formats': dict(format_counts)
                }
                total_images += count
    
    if not class_data:
        print("‚ùå Kh√¥ng t√¨m th·∫•y ·∫£nh n√†o!")
        return None
    
    # T·∫°o DataFrame ƒë·ªÉ d·ªÖ x·ª≠ l√Ω
    df = pd.DataFrame([
        {
            'class': class_name,
            'count': data['count'],
            'formats': data['formats']
        }
        for class_name, data in class_data.items()
    ])
    
    # S·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng ·∫£nh
    df = df.sort_values('count', ascending=False)
    
    # T·∫°o figure v·ªõi nhi·ªÅu subplots
    fig = plt.figure(figsize=(20, 16))
    gs = fig.add_gridspec(3, 3, hspace=0.3, wspace=0.3)
    
    # 1. Bar chart ch√≠nh
    ax1 = fig.add_subplot(gs[0, :2])
    bars = ax1.bar(range(len(df)), df['count'], color='skyblue', edgecolor='navy', alpha=0.7)
    ax1.set_title('S·ªë l∆∞·ª£ng ·∫£nh theo t·ª´ng class', fontsize=14, fontweight='bold')
    ax1.set_xlabel('Class', fontsize=12)
    ax1.set_ylabel('S·ªë l∆∞·ª£ng ·∫£nh', fontsize=12)
    ax1.set_xticks(range(len(df)))
    ax1.set_xticklabels(df['class'], rotation=45, ha='right')
    
    # Th√™m s·ªë li·ªáu tr√™n bars
    for bar, count in zip(bars, df['count']):
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height + max(df['count'])*0.01,
                f'{count}', ha='center', va='bottom', fontweight='bold')
    
    # 2. Pie chart
    ax2 = fig.add_subplot(gs[0, 2])
    colors = plt.cm.Set3(np.linspace(0, 1, len(df)))
    wedges, texts, autotexts = ax2.pie(df['count'], labels=df['class'], autopct='%1.1f%%', 
                                       colors=colors, startangle=90)
    ax2.set_title('T·ª∑ l·ªá ph√¢n b·ªë c√°c class', fontsize=14, fontweight='bold')
    
    # 3. Top 10 classes
    ax3 = fig.add_subplot(gs[1, :])
    top_10 = df.head(10)
    bars_h = ax3.barh(range(len(top_10)), top_10['count'], color='lightcoral', edgecolor='darkred', alpha=0.7)
    ax3.set_title('Top 10 classes c√≥ nhi·ªÅu ·∫£nh nh·∫•t', fontsize=14, fontweight='bold')
    ax3.set_xlabel('S·ªë l∆∞·ª£ng ·∫£nh', fontsize=12)
    ax3.set_yticks(range(len(top_10)))
    ax3.set_yticklabels(top_10['class'])
    
    # Th√™m s·ªë li·ªáu tr√™n bars
    for bar, count in zip(bars_h, top_10['count']):
        width = bar.get_width()
        ax3.text(width + max(top_10['count'])*0.01, bar.get_y() + bar.get_height()/2,
                f'{count}', ha='left', va='center', fontweight='bold')
    
    # 4. Distribution histogram
    ax4 = fig.add_subplot(gs[2, 0])
    ax4.hist(df['count'], bins=20, color='lightgreen', edgecolor='darkgreen', alpha=0.7)
    ax4.set_title('Ph√¢n b·ªë s·ªë l∆∞·ª£ng ·∫£nh', fontsize=14, fontweight='bold')
    ax4.set_xlabel('S·ªë l∆∞·ª£ng ·∫£nh', fontsize=12)
    ax4.set_ylabel('S·ªë class', fontsize=12)
    
    # 5. Box plot
    ax5 = fig.add_subplot(gs[2, 1])
    ax5.boxplot(df['count'], patch_artist=True, boxprops=dict(facecolor='lightblue'))
    ax5.set_title('Box plot s·ªë l∆∞·ª£ng ·∫£nh', fontsize=14, fontweight='bold')
    ax5.set_ylabel('S·ªë l∆∞·ª£ng ·∫£nh', fontsize=12)
    
    # 6. Statistics table
    ax6 = fig.add_subplot(gs[2, 2])
    ax6.axis('tight')
    ax6.axis('off')
    
    # T√≠nh to√°n th·ªëng k√™
    stats_data = [
        ['T·ªïng s·ªë class', f'{len(df)}'],
        ['T·ªïng s·ªë ·∫£nh', f'{total_images:,}'],
        ['Trung b√¨nh ·∫£nh/class', f'{df["count"].mean():.1f}'],
        ['Median ·∫£nh/class', f'{df["count"].median():.1f}'],
        ['√çt nh·∫•t', f'{df["count"].min()}'],
        ['Nhi·ªÅu nh·∫•t', f'{df["count"].max()}'],
        ['ƒê·ªô l·ªách chu·∫©n', f'{df["count"].std():.1f}'],
        ['Class √≠t ·∫£nh nh·∫•t', f'{df.iloc[-1]["class"]} ({df["count"].min()})'],
        ['Class nhi·ªÅu ·∫£nh nh·∫•t', f'{df.iloc[0]["class"]} ({df["count"].max()})']
    ]
    
    table = ax6.table(cellText=stats_data, colLabels=['Th·ªëng k√™', 'Gi√° tr·ªã'], 
                     cellLoc='left', loc='center')
    table.auto_set_font_size(False)
    table.set_fontsize(9)
    table.scale(1.2, 1.5)
    
    # T√¥ m√†u header
    for i in range(2):
        table[(0, i)].set_facecolor('#4CAF50')
        table[(0, i)].set_text_props(weight='bold', color='white')
    
    ax6.set_title('Th·ªëng k√™ t·ªïng quan', fontsize=14, fontweight='bold', pad=20)
    
    # T·ªïng ti√™u ƒë·ªÅ
    fig.suptitle('PH√ÇN T√çCH CHI TI·∫æT DATASET', fontsize=18, fontweight='bold', y=0.98)
    
    plt.tight_layout()
    plt.savefig(os.path.join(save_dir, 'detailed_analysis.png'), dpi=300, bbox_inches='tight')
    
    # Ch·ªâ hi·ªÉn th·ªã n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh (m·∫∑c ƒë·ªãnh l√† False)
    show_plots = False  # C√≥ th·ªÉ thay ƒë·ªïi th√†nh True n·∫øu mu·ªën hi·ªÉn th·ªã
    if show_plots:
        plt.show()
    else:
        plt.close()  # ƒê√≥ng figure ƒë·ªÉ ti·∫øt ki·ªám memory
    
    # T·∫°o ƒë·ªì th·ªã ph√¢n t√≠ch ƒë·ªãnh d·∫°ng file
    analyze_file_formats(df, save_dir)
    
    # In th·ªëng k√™ ra console
    print_statistics(df, total_images)
    
    return {
        'dataframe': df,
        'total_images': total_images,
        'class_data': class_data
    }

def analyze_file_formats(df, save_dir):
    """
    Ph√¢n t√≠ch ƒë·ªãnh d·∫°ng file ·∫£nh
    """
    # Thu th·∫≠p th√¥ng tin ƒë·ªãnh d·∫°ng
    all_formats = defaultdict(int)
    for formats in df['formats']:
        for fmt, count in formats.items():
            all_formats[fmt] += count
    
    if not all_formats:
        return
    
    # V·∫Ω ƒë·ªì th·ªã ƒë·ªãnh d·∫°ng file
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
    
    # Pie chart ƒë·ªãnh d·∫°ng
    formats = list(all_formats.keys())
    counts = list(all_formats.values())
    colors = plt.cm.Pastel1(np.linspace(0, 1, len(formats)))
    
    wedges, texts, autotexts = ax1.pie(counts, labels=formats, autopct='%1.1f%%', 
                                       colors=colors, startangle=90)
    ax1.set_title('Ph√¢n b·ªë ƒë·ªãnh d·∫°ng file ·∫£nh', fontsize=14, fontweight='bold')
    
    # Bar chart ƒë·ªãnh d·∫°ng
    bars = ax2.bar(formats, counts, color=colors, alpha=0.7)
    ax2.set_title('S·ªë l∆∞·ª£ng file theo ƒë·ªãnh d·∫°ng', fontsize=14, fontweight='bold')
    ax2.set_xlabel('ƒê·ªãnh d·∫°ng', fontsize=12)
    ax2.set_ylabel('S·ªë l∆∞·ª£ng file', fontsize=12)
    
    # Th√™m s·ªë li·ªáu tr√™n bars
    for bar, count in zip(bars, counts):
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height + max(counts)*0.01,
                f'{count}', ha='center', va='bottom', fontweight='bold')
    
    plt.tight_layout()
    plt.savefig(os.path.join(save_dir, 'file_formats_analysis.png'), dpi=300, bbox_inches='tight')
    
    # Ch·ªâ hi·ªÉn th·ªã n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh (m·∫∑c ƒë·ªãnh l√† False)
    show_plots = False  # C√≥ th·ªÉ thay ƒë·ªïi th√†nh True n·∫øu mu·ªën hi·ªÉn th·ªã
    if show_plots:
        plt.show()
    else:
        plt.close()  # ƒê√≥ng figure ƒë·ªÉ ti·∫øt ki·ªám memory

def print_statistics(df, total_images):
    """
    In th·ªëng k√™ chi ti·∫øt ra console
    """
    print("\nüìä TH·ªêNG K√ä CHI TI·∫æT DATASET:")
    print("=" * 60)
    print(f"T·ªïng s·ªë class: {len(df)}")
    print(f"T·ªïng s·ªë ·∫£nh: {total_images:,}")
    print(f"Trung b√¨nh ·∫£nh/class: {df['count'].mean():.1f}")
    print(f"Median ·∫£nh/class: {df['count'].median():.1f}")
    print(f"√çt nh·∫•t: {df['count'].min()} ·∫£nh")
    print(f"Nhi·ªÅu nh·∫•t: {df['count'].max()} ·∫£nh")
    print(f"ƒê·ªô l·ªách chu·∫©n: {df['count'].std():.1f}")
    print(f"Class √≠t ·∫£nh nh·∫•t: {df.iloc[-1]['class']} ({df['count'].min()} ·∫£nh)")
    print(f"Class nhi·ªÅu ·∫£nh nh·∫•t: {df.iloc[0]['class']} ({df['count'].max()} ·∫£nh)")
    
    # Ki·ªÉm tra balance
    balance_ratio = df['count'].min() / df['count'].max()
    if balance_ratio > 0.8:
        balance_status = "C√¢n b·∫±ng t·ªët"
    elif balance_ratio > 0.5:
        balance_status = "C√¢n b·∫±ng trung b√¨nh"
    else:
        balance_status = "M·∫•t c√¢n b·∫±ng"
    
    print(f"T·ª∑ l·ªá c√¢n b·∫±ng: {balance_ratio:.2f} ({balance_status})")
    
    # Ph√¢n t√≠ch quartiles
    q25, q50, q75 = df['count'].quantile([0.25, 0.5, 0.75])
    print(f"Quartile 25%: {q25:.1f} ·∫£nh")
    print(f"Quartile 50% (median): {q50:.1f} ·∫£nh")
    print(f"Quartile 75%: {q75:.1f} ·∫£nh")
    
    print("=" * 60)

if __name__ == "__main__":
    # Thay ƒë·ªïi ƒë∆∞·ªùng d·∫´n n√†y theo dataset c·ªßa b·∫°n
    dataset_path = r"D:\AI\Dataset"
    
    print("üöÄ PH√ÇN T√çCH DATASET CHI TI·∫æT")
    print("=" * 50)
    
    result = analyze_dataset_detailed(dataset_path)
    
    if result:
        print(f"\n‚úÖ Ph√¢n t√≠ch ho√†n th√†nh!")
        print(f"üìä C√°c ƒë·ªì th·ªã ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o th∆∞ m·ª•c: dataset_analysis/")
    else:
        print("‚ùå Kh√¥ng th·ªÉ ph√¢n t√≠ch dataset!")
