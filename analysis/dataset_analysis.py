"""
Module cho ph√¢n t√≠ch dataset
"""
import os
import numpy as np
import matplotlib.pyplot as plt

def analyze_and_visualize_dataset(dataset_path, config):
    """
    Ph√¢n t√≠ch v√† v·∫Ω ƒë·ªì th·ªã s·ªë l∆∞·ª£ng ·∫£nh trong t·ª´ng class (phi√™n b·∫£n c∆° b·∫£n)
    """
    PLOT_DPI = config['PLOT_DPI']
    
    if not os.path.exists(dataset_path):
        print(f"‚ùå Th∆∞ m·ª•c {dataset_path} kh√¥ng t·ªìn t·∫°i!")
        return None
    
    print("üîç ƒêang ph√¢n t√≠ch dataset...")
    
    # L·∫•y th√¥ng tin c√°c class
    class_names = []
    class_counts = []
    
    for class_name in sorted(os.listdir(dataset_path)):
        class_path = os.path.join(dataset_path, class_name)
        if os.path.isdir(class_path):
            # ƒê·∫øm s·ªë file ·∫£nh trong class
            image_extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tif', '.gif', '.webp']
            count = 0
            for file in os.listdir(class_path):
                if any(file.lower().endswith(ext) for ext in image_extensions):
                    count += 1
            
            class_names.append(class_name)
            class_counts.append(count)
    
    if not class_names:
        print("‚ùå Kh√¥ng t√¨m th·∫•y class n√†o!")
        return None
    
    # T·∫°o figure v·ªõi subplots
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('PH√ÇN T√çCH DATASET - S·ªê L∆Ø·ª¢NG ·∫¢NH THEO CLASS', fontsize=16, fontweight='bold')
    
    # 1. Bar chart
    bars = ax1.bar(range(len(class_names)), class_counts, color='skyblue', edgecolor='navy', alpha=0.7)
    ax1.set_title('S·ªë l∆∞·ª£ng ·∫£nh theo t·ª´ng class', fontsize=14, fontweight='bold')
    ax1.set_xlabel('Class', fontsize=12)
    ax1.set_ylabel('S·ªë l∆∞·ª£ng ·∫£nh', fontsize=12)
    ax1.set_xticks(range(len(class_names)))
    ax1.set_xticklabels(class_names, rotation=45, ha='right')
    
    # Th√™m s·ªë li·ªáu tr√™n bars
    for bar, count in zip(bars, class_counts):
        height = bar.get_height()
        ax1.text(bar.get_x() + bar.get_width()/2., height + max(class_counts)*0.01,
                f'{count}', ha='center', va='bottom', fontweight='bold')
    
    # 2. Pie chart
    colors = plt.cm.Set3(np.linspace(0, 1, len(class_names)))
    wedges, texts, autotexts = ax2.pie(class_counts, labels=class_names, autopct='%1.1f%%', 
                                       colors=colors, startangle=90)
    ax2.set_title('T·ª∑ l·ªá ph√¢n b·ªë c√°c class', fontsize=14, fontweight='bold')
    
    # 3. Horizontal bar chart (top 10 classes)
    top_n = min(10, len(class_names))
    top_indices = np.argsort(class_counts)[-top_n:]
    top_names = [class_names[i] for i in top_indices]
    top_counts = [class_counts[i] for i in top_indices]
    
    bars_h = ax3.barh(range(len(top_names)), top_counts, color='lightcoral', edgecolor='darkred', alpha=0.7)
    ax3.set_title(f'Top {top_n} classes c√≥ nhi·ªÅu ·∫£nh nh·∫•t', fontsize=14, fontweight='bold')
    ax3.set_xlabel('S·ªë l∆∞·ª£ng ·∫£nh', fontsize=12)
    ax3.set_yticks(range(len(top_names)))
    ax3.set_yticklabels(top_names)
    
    # Th√™m s·ªë li·ªáu tr√™n bars
    for bar, count in zip(bars_h, top_counts):
        width = bar.get_width()
        ax3.text(width + max(top_counts)*0.01, bar.get_y() + bar.get_height()/2,
                f'{count}', ha='left', va='center', fontweight='bold')
    
    # 4. Statistics table
    ax4.axis('tight')
    ax4.axis('off')
    
    # T√≠nh to√°n th·ªëng k√™
    total_images = sum(class_counts)
    avg_images = total_images / len(class_names)
    min_images = min(class_counts)
    max_images = max(class_counts)
    std_images = np.std(class_counts)
    
    stats_data = [
        ['T·ªïng s·ªë class', f'{len(class_names)}'],
        ['T·ªïng s·ªë ·∫£nh', f'{total_images:,}'],
        ['Trung b√¨nh ·∫£nh/class', f'{avg_images:.1f}'],
        ['√çt nh·∫•t', f'{min_images}'],
        ['Nhi·ªÅu nh·∫•t', f'{max_images}'],
        ['ƒê·ªô l·ªách chu·∫©n', f'{std_images:.1f}'],
        ['Class √≠t ·∫£nh nh·∫•t', f'{class_names[np.argmin(class_counts)]} ({min_images})'],
        ['Class nhi·ªÅu ·∫£nh nh·∫•t', f'{class_names[np.argmax(class_counts)]} ({max_images})']
    ]
    
    table = ax4.table(cellText=stats_data, colLabels=['Th·ªëng k√™', 'Gi√° tr·ªã'], 
                     cellLoc='left', loc='center')
    table.auto_set_font_size(False)
    table.set_fontsize(10)
    table.scale(1.2, 1.5)
    
    # T√¥ m√†u header
    for i in range(2):
        table[(0, i)].set_facecolor('#4CAF50')
        table[(0, i)].set_text_props(weight='bold', color='white')
    
    ax4.set_title('Th·ªëng k√™ t·ªïng quan', fontsize=14, fontweight='bold', pad=20)
    
    plt.tight_layout()
    plt.savefig(os.path.join(config['OUTPUT_FOLDER'], 'dataset_analysis.png'), dpi=PLOT_DPI, bbox_inches='tight')
    
    # Ch·ªâ hi·ªÉn th·ªã n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
    if config.get('SHOW_PLOTS', False):
        plt.show()
    else:
        plt.close()  # ƒê√≥ng figure ƒë·ªÉ ti·∫øt ki·ªám memory
    
    # In th·ªëng k√™ ra console
    print("\nüìä TH·ªêNG K√ä DATASET:")
    print("=" * 50)
    print(f"T·ªïng s·ªë class: {len(class_names)}")
    print(f"T·ªïng s·ªë ·∫£nh: {total_images:,}")
    print(f"Trung b√¨nh ·∫£nh/class: {avg_images:.1f}")
    print(f"√çt nh·∫•t: {min_images} ·∫£nh")
    print(f"Nhi·ªÅu nh·∫•t: {max_images} ·∫£nh")
    print(f"ƒê·ªô l·ªách chu·∫©n: {std_images:.1f}")
    print(f"Class √≠t ·∫£nh nh·∫•t: {class_names[np.argmin(class_counts)]} ({min_images} ·∫£nh)")
    print(f"Class nhi·ªÅu ·∫£nh nh·∫•t: {class_names[np.argmax(class_counts)]} ({max_images} ·∫£nh)")
    
    # Ki·ªÉm tra balance
    balance_ratio = min_images / max_images
    if balance_ratio > 0.8:
        balance_status = "C√¢n b·∫±ng t·ªët"
    elif balance_ratio > 0.5:
        balance_status = "C√¢n b·∫±ng trung b√¨nh"
    else:
        balance_status = "M·∫•t c√¢n b·∫±ng"
    
    print(f"T·ª∑ l·ªá c√¢n b·∫±ng: {balance_ratio:.2f} ({balance_status})")
    print("=" * 50)
    
    return {
        'class_names': class_names,
        'class_counts': class_counts,
        'total_images': total_images,
        'balance_ratio': balance_ratio
    }
